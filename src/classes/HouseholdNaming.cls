/*
    Copyright (c) 2011, Salesforce.com Foundation
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Salesforce.com Foundation nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.
 
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.com Foundation
* @date 2011 (2.3)
* @description Controls generation of household names for lists of households 
*/
global virtual without sharing class HouseholdNaming {
      
    @future  
    global static void FutureUpdateNames(list<id> hhids){       
        //set our process control to avoid recursive updating on household records
        HouseholdProcessControl.inFutureContext = true;
        
        //create a new instance of the HouseholdNaming class -
        //and pass in our param
        //this is b/c of the global visibility
        HouseholdNaming hn = new HouseholdNaming();
        hn.UpdateNames(hhids);      
    }
    global virtual string getOtherName(list<Contact> ContactList){return null;}
    global virtual void UpdateNames(list<id> hhids){
        
        //we need this turned on to prevent recursive triggering on household creation        
        HouseholdProcessControl.inFutureContext = true;    
        
        //get all of the contacts and their associated households
        //return them in the order of household and then household naming order
        list<Contact> contactlist = [select id, Firstname, Salutation, LastName, Household__r.id, Naming_Exclusions__c from Contact where Household__c IN :hhids and Household__c != null ORDER BY Household__c,Household_Naming_Order__c ASC NULLS LAST ];
        list<Household__c> hhupdatelist = [select Name, SYSTEM_CUSTOM_NAMING__c from Household__c where id IN : hhids];
        
        map<id, list<Contact>> hhIDContactMap = new map<id, list<Contact>>();
        
        //sort contacts by household
        for (Contact c : contactlist){          
            if(!hhIDContactMap.containskey(c.Household__r.id)){
                hhIDContactMap.put(c.Household__r.id, new list<Contact>{c});
            }
            else{
                list<Contact> clist = hhIDContactMap.get(c.Household__r.id);
                clist.add(c);                
            }
        }
                
        //loop through the households needing name changes, if necessary, make them.
        for (Household__c h : hhupdatelist){    
        
            string customnameparam = '';
            if (h.SYSTEM_CUSTOM_NAMING__c != null){
                customnameparam = h.SYSTEM_CUSTOM_NAMING__c;
            }            
            
            if (!customnameparam.contains('Name'))
                h.Name = getHHName(hhIDContactMap.get(h.id));   
            
            if (!customnameparam.contains('Formal_Greeting__c'))
                h.Formal_Greeting__c = getFormalName(hhIDContactMap.get(h.id));

            if (!customnameparam.contains('Informal_Greeting__c'))
                h.Informal_Greeting__c = getInformalName(hhIDContactMap.get(h.id));             
        } 
        
        if (!hhupdatelist.isEmpty()) Database.update(hhupdatelist, false);
    }
    
    //get generic household name 
    global virtual string getHHName(list<Contact> ContactList){
        string householdname = '';
        
        if(ContactList != null){
            //most of our records will be either one or two people per household, so we'll handle
            //those cases seperately, process medium size households, then
            //go on to larger
            //we need to keep the names in order so store them in a list, but also maintain a set to prevent duplicates
            set<string> contactlastnamesSet = new set<string>();
            list<string> contactlastnames = new list<string>(); 
             
            for (Contact c : ContactList){
                //add valid values to the contactnames and lastnames lists for processing if not already in the set
                if((c.Naming_Exclusions__c == null || !c.Naming_Exclusions__c.contains('Household__c.Name')) 
                	&& !contactlastnamesSet.contains(c.LastName))
                {
                    contactlastnames.add(c.LastName);
                    contactlastnamesSet.add(c.LastName);
                }
            }
            
            //we lost our only contact - he/she's anonymous
            if (contactlastnames.isEmpty())
                householdname = system.label.HouseholdAnonymousName + ' ' + system.label.DefaultHouseholdName;
                    
            //standard hh naming
            else if (contactlastnames.size() > 0 && contactlastnames.size() < 10){          
                integer x = 0;
                for (string lastname : contactlastnames){
                    x++;
                    householdname += lastname;
                    
                    if (x < contactlastnames.size() - 1)
                        householdname += ', ';
                    else if (x == contactlastnames.size() - 1)
                        householdname += ' ' + system.label.HouseholdNameConnector + ' ';
                    else
                        householdname += ' ' + system.label.DefaultHouseholdName;                                
                }
            }
            
            //more than 10 DIFFERENT last names, default to family, it can be overwritten in this 
            //special case
            else{
               householdname = ContactList[0].LastName;
               householdname += ' ' + system.label.HouseholdNameConnector + ' ' + system.label.HouseholdNameOverrun + ' ' + system.label.DefaultHouseholdname;
            }
        }
        return householdname;
    }
    
    
    //just pile up first names for qualifying contacts
    global virtual string getInformalName(list<Contact> ContactList){
        string informalname = ''; 
       
        list<Contact> contactnames = new list<Contact>();
       
        integer i = 0;
        //remove any excluded contacts
        if (Contactlist != null){
        
        for (Contact c : ContactList){ 
            if(c.FirstName != null && (c.Naming_Exclusions__c == null || !c.Naming_Exclusions__c.contains('Household__c.Informal_Greeting__c')))
                contactnames.add(c);
        }
        
        integer listsize = 0;
        if (contactnames != null)
            listsize = contactnames.size();
        
        if (listsize == 0)
            informalname = system.label.HouseholdAnonymousGreeting;
        
        else if (listsize == 1)
            informalname = contactnames[0].FirstName;
        
        else if (listsize == 2)
            informalname = contactnames[0].FirstName + ' ' + system.label.HouseholdNameConnector + ' ' + contactnames[1].FirstName;
        
        //more than 2
        else{
            integer counter = 1;
            for (Contact c : contactnames){
                
                //we're at the first name in the group
                if (counter == 1)
                    informalname += c.FirstName;
                //if we're at the last name in the group
                else if (counter == contactnames.size())
                    informalname += ' ' + system.label.HouseholdNameConnector + ' ' + c.FirstName;
                //we're somewhere in the middle of the group
                else
                    informalname += ', ' + c.Firstname;
                
                counter++;
            }  
        }
        }
        return informalname;
    }
    
    global virtual string getFormalName(list<Contact> ContactList){
        string formalname = ''; 
       
        list<Contact> contactnames = new list<Contact>();
       
        integer i = 0;
        
        if (Contactlist != null){
        //remove any excluded contacts
        for (Contact c : ContactList){ 
            if(c.Naming_Exclusions__c == null || !c.Naming_Exclusions__c.contains('Household__c.Formal_Greeting__c'))
                contactnames.add(c);
        }
        
            //chuck all of the last names in a set, lets see how many different ones we have
        set<string> lastnamelist = new set<string>();
        for (Contact c : contactnames)
            lastnamelist.add(c.LastName);  
      
      
        //no non-excluded contact for this household
        if (contactnames.size() == 0){                        
            formalname += '-'; 
        }
        else if (contactnames.size() > 0 && contactnames.size() < 9){
            
            integer counter = 1;
            for(Contact c : contactnames){    
                
                if (c.Salutation != null)
                    formalname += c.Salutation;
                if (c.Salutation != null && c.FirstName != null) //correct spacing between names
                	formalname += ' ';
                if (c.FirstName != null)
                    formalname += c.FirstName;
                if (lastnamelist.size() != 1 && counter != contactnames.size())
                    formalname += ' ' + c.LastName;
                    
                //any first name before the last and next to last gets the
                //same treatment, a comma.
                if(counter < (contactnames.size() - 1))
                    formalname += ', ';
                else if (counter == (contactnames.size() - 1))
                    formalname += ' ' + system.label.HouseholdNameConnector + ' ';                          
                //add the family name     
                else
                    formalname += ' ' + c.LastName;
        
                counter++;
            }            
        }          
        
        //else we have 9 or more people
        else{        
            //some default name here        
            if (contactnames[0].Salutation != null)
                formalname += contactnames[0].Salutation + ' ';
            if (contactnames[0].FirstName != null)
                formalname += contactnames[0].FirstName + ' ';                    
            
            formalname += contactnames[0].LastName + ' ' + system.Label.HouseholdNameConnector + ' ' + system.label.HouseholdNameOverrun;
        }
        }
        return formalname;  
    }
    
    //interface for the batch jobs on advanced greeting activation
    public void ActivateAdvancedGreetings(boolean isTest){
        
        //shamelessly borrowed from opprollups      
        integer batchSize = 200;
        
        //start the activation batch process, used only once, on initial click
        //to enable batch rollups
        BATCH_HouseholdNaming batch = new BATCH_HouseholdNaming('SELECT id, npo02__Household__r.id, ' + 
        'npo02__household__r.Name, npo02__Household__r.npo02__Informal_Greeting__c, npo02__Household__r.npo02__Formal_Greeting__c, ' +
        'npo02__household__r.npo02__SYSTEM_CUSTOM_NAMING__c, npo02__Naming_Exclusions__c,  Firstname, lastname, ' +
        'salutation ' +
        'FROM Contact where npo02__Household__c != null ' +
        (isTest ? ' and lastname=\'%LastName0%\' LIMIT 200' : '') + 
        '', true);
        id batchProcessId = database.executeBatch(batch, batchSize);                 
    }
    
    /*** Test Methods ***/
    static testMethod void HouseholdNamingTest(){
      //settings
      Households_Settings__c householdSettingsForTests = Households.getHouseholdsSettingsForTests(
                new Households_Settings__c (
                    Household_Rules__c = Households.ALL_PROCESSOR,
                    Always_Rollup_to_Primary_Contact__c = false,
                    Enable_Opp_Rollup_Triggers__c = true,
                    Excluded_Account_Opp_Rectypes__c = null,
                    Excluded_Account_Opp_Types__c = null,
                    Excluded_Contact_Opp_Rectypes__c = null,
                    Excluded_Contact_Opp_Types__c = null                    
                ));
                
            npe01__Contacts_and_Orgs_Settings__c contactSettingsForTests = npe01.Constants.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c (
                npe01__Account_Processor__c = npe01.Constants.ONE_TO_ONE_PROCESSOR,
                npe01__Enable_Opportunity_Contact_Role_Trigger__c = true,
                npe01__Opportunity_Contact_Role_Default_role__c = 'Donor'
            ));
        
        integer i;
        
        list<Contact> insertlist = new list<Contact>();
        for (i = 0; i < 20; i++){
            Contact c = new Contact(LastName = 'LastName' + i, FirstName = 'FirstName' + i, Salutation = 'Mr.');
            if (i == 1){
                c.Naming_Exclusions__c = 'Household Name';
            }
            
            insertlist.add(c);
        }       
                
        insert insertlist;
        list<id> householdids = new list<id>();
        
        list<Contact> clist = [select Naming_Exclusions__c, Household__r.id, Household__r.Name, Household__r.Informal_Greeting__c, Household__r.Formal_Greeting__c from Contact where id IN :insertlist limit 2000];
        
        for (Contact c : clist){
            if (c.household__r.id != null)
              householdids.add(c.Household__r.id);          
        }
        system.assert(householdids.size() > 0);
        
        //use future to prevent the before HH trigger from firing    
        test.starttest();         
        Householdnaming.FutureUpdateNames(householdids);
        test.stoptest();
        //test a single member household, lastname, firstname, householdname:
        Contact con = [select Household__r.Name, Household__r.Informal_Greeting__c, Household__r.Formal_Greeting__c from Contact where FirstName = 'FirstName0'];
        system.assertEquals('LastName0 ' +  system.label.DefaultHouseholdName, con.Household__r.Name);  
        system.assertEquals('FirstName0',con.Household__r.Informal_Greeting__c);
        system.assertEquals('Mr. FirstName0 LastName0', con.Household__r.Formal_Greeting__c);
        
        Householdnaming hn = new Householdnaming();
        //test for coverage
         hn.ActivateAdvancedGreetings(true);
        
    }
    
    static testMethod void HouseholdNamingUpdateTest(){
        //settings
      Households_Settings__c householdSettingsForTests = Households.getHouseholdsSettingsForTests(
                new Households_Settings__c (
                    Household_Rules__c = Households.ALL_PROCESSOR,
                    Always_Rollup_to_Primary_Contact__c = false,
                    Enable_Opp_Rollup_Triggers__c = true,
                    Excluded_Account_Opp_Rectypes__c = null,
                    Excluded_Account_Opp_Types__c = null,
                    Excluded_Contact_Opp_Rectypes__c = null,
                    Excluded_Contact_Opp_Types__c = null,     
                    Advanced_Household_Naming__c = true               
                ));
                
            npe01__Contacts_and_Orgs_Settings__c contactSettingsForTests = npe01.Constants.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c (
                npe01__Account_Processor__c = npe01.Constants.ONE_TO_ONE_PROCESSOR,
                npe01__Enable_Opportunity_Contact_Role_Trigger__c = true,
                npe01__Opportunity_Contact_Role_Default_role__c = 'Donor'
            ));
        
        integer i;
        
        list<Contact> insertlist = new list<Contact>();
        for (i = 0; i < 200; i++){
            Contact c = new Contact(LastName = 'LastName' + i, FirstName = 'FirstName' + i, Salutation = 'Mr.');
            if (i == 1){
                c.Naming_Exclusions__c = 'Household Name';
            }
            
            insertlist.add(c);
        }  
        
        //turn off the before trigger via our processor:
        HouseholdProcessControl.inFutureContext = true;        
        insert insertlist;
        list<id> householdids = new list<id>();
        
        list<Contact> clist = [select Naming_Exclusions__c, Household__r.id, Household__r.Name, Household__r.Informal_Greeting__c, Household__r.Formal_Greeting__c from Contact where id IN :insertlist limit 2000];
        
        for (Contact c : clist){
            if (c.household__r.id != null)
              householdids.add(c.Household__r.id);          
        }
        
        //update some contacts and note the changes
        //set first one to the last household, next two to the second, next five to the third, 
        //and next 10 to the last (array spots end, end - 1, etc.)
        integer counter = 0;
        for (Contact c : clist){
            if(counter == 0)
                c.npo02__Household__c = clist[clist.size() - 1].npo02__Household__c;
            else if (counter > 0 && counter < 3)
                c.npo02__Household__c = clist[clist.size() - 2].npo02__Household__c;
            else if (counter > 2 && counter < 8)
                c.npo02__Household__c = clist[clist.size() - 3].npo02__Household__c;
            else if (counter < 20)
                c.npo02__Household__c = clist[clist.size() - 4].npo02__Household__c;
            counter++;
        }
        //this should cause renaming to happen
        //but not trigger the before household_update, since 
        //since it will be in the same transaction                 
        update clist;
        
        list<id> newhhids = new list<id>();
        newhhids.add(clist[clist.size() - 1].npo02__Household__r.id);
        newhhids.add(clist[clist.size() - 2].npo02__Household__r.id);
        newhhids.add(clist[clist.size() - 3].npo02__Household__r.id);
        newhhids.add(clist[clist.size() - 4].npo02__Household__r.id);
        
        //update our newly updated contact's households
        Householdnaming hn = new Householdnaming();
        test.startTest();
        hn.UpdateNames(newhhids);
        
        //take teh list of contacts in each of the households in newhhids, and run them
        //back through the global string calls to test them - this never quite worked -
        // i think something about how HHs are created, with the contact re-update is causing
        //an issue in testing
       /* 
        map<id, Household__c> hhmap = new map<id, Household__c>([select SYSTEM_CUSTOM_NAMING__c, Name, Informal_greeting__c, Formal_greeting__c from Household__c where id IN :newhhids]);
        
        list<Contact> lc = new list<contact>([select household__r.id, 
        household__r.name, household__r.Informal_Greeting__c, FirstName, Salutation, LastName, 
        Naming_Exclusions__c, household__r.SYSTEM_CUSTOM_NAMING__c,
        household__r.Formal_Greeting__c from Contact where household__r.id IN :newhhids]);
        
        map<id,list <Contact>> hhidContactMap = new map<id, list <Contact>>();
        for (Contact c : lc){
            if(!hhIDContactMap.containskey(c.Household__r.id)){
                hhIDContactMap.put(c.Household__r.id, new list<Contact>{c});
            }
            else{
                list<Contact> conlist = hhIDContactMap.get(c.Household__r.id);
                conlist.add(c);                
            }
        }
        
        //for each one, run its contact through the  test methods
        //and compare it with the household values from teh first contact
        //record              
        for (id HHID : hhidContactMap.keySet()){
            if (hhidcontactmap.get(hhid)[0].household__r.SYSTEM_CUSTOM_NAMING__c != null){
                system.assert(!hhidcontactmap.get(hhid)[0].household__r.SYSTEM_CUSTOM_NAMING__c.contains('Name'));
                system.assert(!hhidcontactmap.get(hhid)[0].household__r.SYSTEM_CUSTOM_NAMING__c.contains('Informal_Greeting__c'));
                system.assert(!hhidcontactmap.get(hhid)[0].household__r.SYSTEM_CUSTOM_NAMING__c.contains('Formal_Greeting__c'));
            } 
            system.assertEquals(hhMap.get(hhid).Name, hn.getHHName(hhidcontactmap.get(hhid)));
            system.assertEquals(hhidcontactmap.get(hhid)[0].Household__r.Informal_Greeting__c, hn.getInformalName(hhidcontactmap.get(hhid)));
            system.assertEquals(hhidcontactmap.get(hhid)[0].Household__r.Formal_Greeting__c, hn.getFormalName(hhidcontactmap.get(hhid)));
        }       
        */
    test.stopTest();        
    }
    
    public static testMethod void testNamingOrder() {
        //settings
      Households_Settings__c householdSettingsForTests = Households.getHouseholdsSettingsForTests(
                new Households_Settings__c (
                    Household_Rules__c = Households.ALL_PROCESSOR,
                    Always_Rollup_to_Primary_Contact__c = false,
                    Enable_Opp_Rollup_Triggers__c = true,
                    Excluded_Account_Opp_Rectypes__c = null,
                    Excluded_Account_Opp_Types__c = null,
                    Excluded_Contact_Opp_Rectypes__c = null,
                    Excluded_Contact_Opp_Types__c = null,     
                    Advanced_Household_Naming__c = true               
                ));
                
            npe01__Contacts_and_Orgs_Settings__c contactSettingsForTests = npe01.Constants.getContactsSettingsForTests(new npe01__Contacts_and_Orgs_Settings__c (
                npe01__Account_Processor__c = npe01.Constants.ONE_TO_ONE_PROCESSOR,
                npe01__Enable_Opportunity_Contact_Role_Trigger__c = true,
                npe01__Opportunity_Contact_Role_Default_role__c = 'Donor'
            ));
            
        Household__c hh = new Household__c (
            Name = 'Household'
            );
        insert hh;
        
        Contact con0 = new Contact(
            FirstName = 'John',
            LastName = 'Jones'
            );
        insert con0;
        
        Contact con1 = new Contact(
            FirstName = 'Joe',
            LastName = 'Test',
            Household__c = hh.id
            );
        insert con1;
        
        Contact con2 = new Contact(
            FirstName = 'Jim',
            LastName = 'Test',
            Household__c = hh.id
            );
        insert con2;

		
		//test various re-orderings of names
        Test.startTest();
        
		HouseholdNaming hn = new HouseholdNaming();
		
		hn.UpdateNames(new list<Id>{hh.id});
		
		hh = [select Id, Name, Formal_greeting__c, Informal_greeting__c from Household__c where id = :hh.id LIMIT 1][0];
        
        system.assertequals('Test ' + system.label.DefaultHouseholdName, hh.Name);
        system.assert(hh.Formal_greeting__c.contains('Joe'));
        system.assert(hh.Formal_greeting__c.contains('Jim'));
        system.assert(hh.Formal_greeting__c.endswith('Test'));
        system.assert(hh.Informal_greeting__c.contains('Joe'));
        system.assert(hh.Informal_greeting__c.contains('Jim'));

		con1.Household_Naming_Order__c = 0;
		con2.Household_Naming_Order__c = 1;
		
		update con1;
		update con2;
		
		hn.UpdateNames(new list<Id>{hh.id});
		
		hh = [select Id, Name, Formal_greeting__c, Informal_greeting__c from Household__c where id = :hh.id LIMIT 1][0];
		
        system.assertequals('Test ' + system.label.DefaultHouseholdName, hh.Name);
		system.assertequals('Joe ' + system.label.HouseholdNameConnector + ' Jim Test', hh.Formal_greeting__c);
		system.assertequals('Joe ' + system.label.HouseholdNameConnector + ' Jim', hh.Informal_greeting__c);
        
        con0.Household__c = hh.id;
        con0.Household_Naming_Order__c = 0;
        con1.Household_Naming_Order__c = null;
        
        update con0;
		update con1;
		
		hn.UpdateNames(new list<Id>{hh.id});
		
		hh = [select Id, Name, Formal_greeting__c, Informal_greeting__c from Household__c where id = :hh.id LIMIT 1][0];
		
        system.assertequals('Jones ' + system.label.HouseholdNameConnector + ' Test ' + system.label.DefaultHouseholdName, hh.Name);
		system.assertequals('John Jones, Jim Test ' + system.label.HouseholdNameConnector + ' Joe Test', hh.Formal_greeting__c);
		system.assertequals('John, Jim ' + system.label.HouseholdNameConnector + ' Joe', hh.Informal_greeting__c);
		
        con0.Household_Naming_Order__c = null;
        con1.Household_Naming_Order__c = 2;
        
        update con0;
		update con1;
		
		hn.UpdateNames(new list<Id>{hh.id});
		
		hh = [select Id, Name, Formal_greeting__c, Informal_greeting__c from Household__c where id = :hh.id LIMIT 1][0];
		
        system.assertequals('Test ' + system.label.HouseholdNameConnector + ' Jones ' + system.label.DefaultHouseholdName, hh.Name);
		system.assertequals('Jim Test, Joe Test ' + system.label.HouseholdNameConnector + ' John Jones', hh.Formal_greeting__c);
		system.assertequals('Jim, Joe ' + system.label.HouseholdNameConnector + ' John', hh.Informal_greeting__c);
		
        Test.stopTest();
        
    }  
}