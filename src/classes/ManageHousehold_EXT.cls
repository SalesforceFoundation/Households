// Written by Ryan Foster, copyright (c) 2011 Groundwire
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/

/*******************************************************************************************************
* @author Ryan Foster
* @date 11/10/2011
* @description This class is the VF page extension for the Manage Household interface. This allows users to
* setup their household members, name, and greeting before creating the household. It will also allow the user
* to set the address on the household.
*
* 04/01/2012 James Melville
* Changes made throughout to support NPSP HH
* * String.escapeSingleQuotes() added (bug fix for names including ' etc.)
* * class renamed ManageHousehold_EXT
* * Fields / objects updated to NPSP values / names e.g. npo02__Household__c (namespace prefix required?)
* * Naming methods updated to support NPSP's Name / Formal / Informal structure and npo02__SYSTEM_CUSTOM_NAMING__c setting field
* * Address object updated with viableAddress class to store household or contact addresses
* * use Mailing* instead of Other* fields for addresses
* * Set Household address based on address selected in UI
* * Use "useAddress" flag to set or not set address on contacts
* * 15/01/2012 Fixed household addressing, added tests for household addressing code
* * 16/01/2012 Fixed defect when contacts were removed and re-added
* * 
 * 
* * TODO
* * Opty rollups - line 709 - npo02.OpportunityRollups needs global constructor - until then only works inside package
*/

global with sharing class ManageHousehold_EXT {

    public npo02__Household__c hh{get; set;}
    public String ctrlName {
        get {
            return 'ManageHousehold_EXT'; //GW_Utilities.InManagedPackage == true ? 'GWBase__ManageHousehold_EXT' : 'ManageHousehold_EXT';
        }
    }
    
    // is automatic household naming used for this household?
    public Boolean autoName {
        get {
            if (hh.Id == null && hh.Name == null) {
                return true;
            }
            
            if (hh.npo02__SYSTEM_CUSTOM_NAMING__c != null)
            {
                if(hh.npo02__SYSTEM_CUSTOM_NAMING__c.contains('Name'))
                	return false;
            }

           	return true;
        }
    }
    public Boolean autoFormalGreeting {
        get {
            if (hh.Id == null && hh.npo02__Formal_Greeting__c == null) {
                return true;
            }
            if (hh.npo02__SYSTEM_CUSTOM_NAMING__c != null)
            {
                if(hh.npo02__SYSTEM_CUSTOM_NAMING__c.contains('Formal_Greeting__c'))
                	return false;
            }

           	return true; 
        }
    }
    public Boolean autoInformalGreeting {
        get {
            if (hh.Id == null && hh.npo02__Informal_Greeting__c == null) {
                return true;
            }
            if (hh.npo02__SYSTEM_CUSTOM_NAMING__c != null)
            {
                if(hh.npo02__SYSTEM_CUSTOM_NAMING__c.contains('Informal_Greeting__c'))
                	return false;
            }

           	return true; 
        }
    }
    
    // if automatic household naming is used for this household, return the autogenerated name / greeting
    public String hhName {
        get {
            if (autoName) {
                return getHHName();
            }
            return hh.Name;
        }
        set;
    }
    public String hhFormalGreeting {
        get {
            if (autoFormalGreeting) {
                return getHHFormalName();
            }
            return hh.npo02__Formal_Greeting__c;
        }
        set;
    }
    public String hhInformalGreeting {
        get {
            if (autoInformalGreeting) {
                return getHHInformalName();
            }
            return hh.npo02__Informal_Greeting__c;
        }
        set;
    }
    
    
    public Id conId;
    public Contact con;
    public map<Id, Contact> activeContacts;
    public map<Id, Contact> removeContacts;
    public list<Contact> insertContacts;
    
    public String jsonState {get;set;}
    public String originalState {get;set;}
    public String redirectTo {get;set;}
    
    // update contact addresses to match household address - default to false for NPSP? 
    public boolean useAddress = false;
    public string activeAddressKey;
    public string activeStreet;
    public string activeCity;
    public string activePostalCode;
    public string activeState;
    public string activeCountry;
     
    public static string conSelect = 'SELECT Id, FirstName, LastName, Salutation, Name,npo02__Naming_Exclusions__c, npo02__Household__c, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry FROM Contact ';
    
	//object to hold viable addresses - this is the DISTINCT (SQL style) list which includes household address and all contact addresses
	// see function getViableAddresses for how the map is populated
    public map<String, viableAddress> viableAddresses;
    
    public class viableAddress {
    	String AddressKey;
    	String MailingStreet;
    	String MailingCity;
    	String MailingPostalCode;
    	String MailingState;
    	String MailingCountry;
    }
    
    public ManageHousehold_EXT(ApexPages.StandardController controller) {
        
        activeContacts = new map<Id, Contact>();
        removeContacts = new map<Id, Contact>();
        viableAddresses = new map<String, viableAddress>();
        insertContacts = new list<Contact>();
        
        Id tempHHid;
        npo02__Household__c thh = (npo02__Household__c)controller.getRecord();
        if (thh.Id == null) {
            try {
            	String paramHhId = String.escapeSingleQuotes(ApexPages.currentPage().getParameters().get('hhid'));
                tempHHid = paramHhId;
            } catch (Exception e) {
                tempHHid = null;
            }
        } else {
            tempHHid = thh.Id;
        }
        hh = tempHHid != Null ? getHH(tempHHid) : thh;
        
        //Get the contact id from the query if present - ensure it is sanitised
        try {
        	conId = (Id)String.escapeSingleQuotes(ApexPages.currentPage().getParameters().get('cid'));
        } catch (Exception e) {
            conId = null;
        }
        
        list<Contact> hhMembers = getHHMembers();
        
        //if we are an existing household, get the members
        if (hh.Id != Null || conId != null) {
            
            if (!hhMembers.isEmpty()) {
                activeContacts.putAll(hhMembers);
            }
        }
        
        //lookup viable addresses
        getViableAddresses();
        
        //set the household default address to the first found address if it exists
        /*if (activeAddressKey == null && !viableAddresses.isEmpty()) {
            setActiveAddress(new list<String>(viableAddresses.keySet())[0]);
        }*/
                
        jsonState = JSON.serialize(this);
        
        // If we are in edit mode, add a copy of the state to compare against
        originalState = (hh.Id != null) ? jsonState : '';
    }
    
    
    
    
    /*******************************************************************************************************
    * @description Method to return up to 20 contacts with names similar to a passed in string. Filters out
    * contacts that have already been added to the household.
    * @param subString the substring to filter by
    * @return list<Contact>
    ********************************************************************************************************/
    @RemoteAction
    global static list<Contact> findContacts(string subString, String state) {
        ManageHousehold_EXT ManageHousehold = unpackState(state);
        
        string excludeIds = '';
        list<Id> activeConIds = new list<Id>();
        activeConIds.addAll(ManageHousehold.activeContacts.keySet());
        if (!activeConIds.isEmpty()) {
            excludeIds = 'AND Id NOT IN (';
            integer i = 1;
            for (Id conId : activeConIds) {
                excludeIds += '\''+conId+'\'';
                if (i != activeConIds.size()) excludeIds += ',';
                i += 1;
            }
            excludeIds += ')';
        }
        //added String.escapeSingleQuotes for names like O'Leary and prevent sql injection by users
        String whereClause = 'WHERE Name LIKE \'%'+String.escapeSingleQuotes(subString)+'%\' '+excludeIds+' LIMIT 20';
        String q = conSelect + whereClause;
        return database.query(q);
    }
    
    /*******************************************************************************************************
    * @description Takes a JSON string and attempts to instantiate ManageHousehold_EXT using the
    * deserialized object.
    * @param String state - A serialized copy of the page controller state.
    * @return ManageHousehold_EXT
    ********************************************************************************************************/
    private static ManageHousehold_EXT unpackState(String state) {
        // There is a "bug" where not all of the classes have been loaded by apex when it attempts
        // to JSON.deserialize. The method below makes sure that the type is properly loaded when it attempts to
        // instantiate the object.
        String strState = state;
        JSONParser parser = JSON.createParser(state);
        Type wrapperType = Type.forName('ManageHousehold_EXT');
        ManageHousehold_EXT ManageHousehold = (ManageHousehold_EXT) parser.readValueAs(wrapperType);
        
        return ManageHousehold;
    }
    /*******************************************************************************************************
    * @description Accepcts a ManageHousehold_EXT and serializes it into JSON
    * @param ManageHousehold_EXT state - A copy of the page controller state.
    * @return String
    ********************************************************************************************************/
    private static string packState(ManageHousehold_EXT state) {
        return JSON.serialize(state);
    }
    
    /*******************************************************************************************************
    * @Remote add a Contact to HH by Id, optionally include Contact's HH.
    * @return JSON State.
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteAddMember(Id cid, Boolean includeHH, String state) {
        ManageHousehold_EXT ManageHousehold = unpackState(state);
        Boolean status = false;
        
        if (!includeHH) {
            // If we should not include household members
            status = ManageHousehold.addContact(cid);
        } else {
            // If we should include household members
            status = ManageHousehold.addContactWithHousehold(cid);
        }
        
        // Update viable addresses
        ManageHousehold.getViableAddresses();
        
        // If we don't have an address attempt to select one //ManageHousehold.useAddress == false && 
        /*if (!ManageHousehold.viableAddresses.isEmpty() && ManageHousehold.isAddressNull()) {
            ManageHousehold.setActiveAddress(new list<String>(ManageHousehold.viableAddresses.keySet())[0]);
        }*/
        
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @Remote method to remove a contact by Id
    * @return JSON state.
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteRemoveMember(Id cid, String state) {
        ManageHousehold_EXT ManageHousehold = unpackState(state);
        
        ManageHousehold.removeContact(cid);
        
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @Sets the naming related fields on the Household and gets the name.
    * @return JSON.
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteSetNaming(Boolean aN, String nN, Boolean aFG, String nFG, Boolean aIG, String nIG, String state) {
        ManageHousehold_EXT ManageHousehold = unpackState(state);
        
        ManageHousehold.hh.npo02__SYSTEM_CUSTOM_NAMING__c = '';
        //for each of the naming exceptions, set the override field and the overridden value
        if (!aN) { 
        	ManageHousehold.hh.Name = nN;
        	ManageHousehold.hh.npo02__SYSTEM_CUSTOM_NAMING__c += 'Name;';
        }
        
        if (!aFG) {
        	ManageHousehold.hh.npo02__Formal_Greeting__c = nFG;
        	ManageHousehold.hh.npo02__SYSTEM_CUSTOM_NAMING__c += 'Formal_Greeting__c;';
        }
        
        if (!aIG) {
        	ManageHousehold.hh.npo02__Informal_Greeting__c = nIG;
        	ManageHousehold.hh.npo02__SYSTEM_CUSTOM_NAMING__c += 'Informal_Greeting__c;';
        }
        
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @Remote method to save HH.
    * @return JSON.
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteSave(String state) {
        ManageHousehold_EXT ManageHousehold = unpackState(state);
        ManageHousehold.saveHH();
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @Describes npo02__Household__c to get all of the fields, then runs a SOQL to get the household record by
    * Id with all of the fields.
    * @return npo02__Household__c.
    ********************************************************************************************************/
    public npo02__Household__c getHH(Id hhId) {
        Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.npo02__Household__c.fields.getMap();
        list<String> fields = new list<String>();
        fields.addAll(fieldMap.keySet());
        String hhq = 'SELECT ';
        Integer i = 1;
        for (String fld : fields) {
            hhq += fld;
            if (i != fields.size()) hhq += ', ';
            i += 1;
        }
        hhq += ' FROM npo02__Household__c WHERE Id = \''+hhId+'\'';
        String q = hhq;
        npo02__Household__c houseHold = database.query(q);
        return houseHold;
    }
    
    /*******************************************************************************************************
    * @description add a contact to the household by id.
    * @param Id cid the id to add.
    * @return Boolean
    ********************************************************************************************************/
    public boolean addContact(Id cid) {
        
        String whereClause = 'WHERE Id = \''+cid+'\'';
        String q = conSelect + whereClause;
        list<Contact> con = Database.query(q);
        if (!con.isEmpty()) {
            activeContacts.put(con[0].id, con[0]);
            removeContacts.remove(con[0].id);
            return true;
        }
        return false;
        
    }
    
    /*******************************************************************************************************
    * @Remove a contact by Id from the active set. Also resets the viableAddresses and activeAddress
    * @return boolean.
    ********************************************************************************************************/
    public boolean removeContact(Id cid) {
        
        Contact con = activeContacts.containsKey(cid) ? activeContacts.get(cid) : null;
        
        if (con == null) return false;
        
        // If this is an existing HH and the contact was a member, add the contact to list of removes
        if (hh.Id != null && con.npo02__Household__c == hh.Id) {
            con.npo02__Household__c = null;
            removeContacts.put(con.id,con);
        }
        
        // remove the contact from the active set
        activeContacts.remove(cid);
        
        if (cid == conId) conid = null;
        
        getViableAddresses();
        
        if(viableAddresses.isEmpty() || viableAddresses.get(activeAddressKey) == null)
        {
        	activeAddressKey = null;
        	if (!viableAddresses.isEmpty()) setActiveAddress(new list<String>(viableAddresses.keySet())[0]);
        }
        
        return true;
        
    }
    
    /*******************************************************************************************************
    * @description add a contact to the household by id along with all of the contacts in the same
    * household.
    * @param Id cid the id to add.
    * @return Boolean
    ********************************************************************************************************/
    public boolean addContactWithHousehold(Id cid) {
        
        String whereClause = 'WHERE Id = \''+cid+'\'';
        String q = conSelect + whereClause;
        list<Contact> con = Database.query(q);
        if (!con.isEmpty()) {
            activeContacts.put(con[0].id, con[0]);
            removeContacts.remove(con[0].id);
            // check for household then find and add contacts
            if (con[0].npo02__Household__c != null) {
                whereClause = 'WHERE npo02__Household__c = \''+con[0].npo02__Household__c+'\'';
                q = conSelect + whereClause;
                list<Contact> hhcons = Database.query(q);
                if (!hhcons.isEmpty()) {
                    for (Contact hhcon : hhcons) {
                        
                        activeContacts.put(hhcon.id, hhcon);
                        removeContacts.remove(hhcon.id);
                    }
                }
            }
            
            return true;
        }
        return false;
        
    }
    
    /*******************************************************************************************************
    * @description set the active address from the address fields on a contact.
    * @param Id cid the id of the contact to select the address from.
    * @return Boolean
    ********************************************************************************************************/
    public boolean setActiveAddress(String addressKey) {
        viableAddress selectedaddr = viableAddresses.get(addressKey);
        if (selectedaddr == null) return false;
        activeAddressKey = addressKey;
        activeStreet = selectedaddr.MailingStreet;
        activeCity = selectedaddr.MailingCity;
        activeState = selectedaddr.MailingState;
        activePostalCode = selectedaddr.MailingPostalCode;
        activeCountry = selectedaddr.MailingCountry;
        
        return true;
    }
    
    /*public boolean isAddressNull() {
        if ((activeStreet != null && activeStreet != '') ||
            (activeCity != null && activeCity != '') ||
            (activeState != null && activeState != '') ||
            (activePostalCode != null && activePostalCode != '') ||
            (activeCountry != null && activeCountry != '')) {
            return false;
        }
        return true;
    }*/
    
    /*******************************************************************************************************
    * @description iterate over the active contacts and find all good addresses
    * @return list<viableAddress> list of viable addresses - with fields named similarly to the contact object
    ********************************************************************************************************/
    public list<viableAddress> getViableAddresses() {
        //list<Contact> retCons = new list<contact>();
        //if (activeContacts.isEmpty()) return retCons;
        viableAddresses.clear();
        //add household address
        if (hh.npo02__MailingStreet__c != null || hh.npo02__MailingCity__c != null || hh.npo02__MailingState__c != null || hh.npo02__MailingPostalCode__c != null || hh.npo02__MailingCountry__c != null)
        {
        	string addressString = hh.npo02__MailingStreet__c + '#' + hh.npo02__MailingCity__c + '#' + hh.npo02__MailingState__c + '#' + hh.npo02__MailingPostalCode__c + '#' + hh.npo02__MailingCountry__c;
            
            // regex pattern for getting all white space
            pattern whtspc = pattern.compile('[\\s]');
            
            //find whitespace
            matcher matchWhtSpc = whtspc.matcher(addressString);
            
            //replace whitespace
            addressString = matchWhtSpc.replaceAll('');
            
            if (!viableAddresses.containsKey(addressString))
			{
				viableAddress hhaddr = new viableAddress();

				hhaddr.AddressKey = addressString;
				hhaddr.MailingStreet = hh.npo02__MailingStreet__c;
				hhaddr.MailingCity =hh.npo02__MailingCity__c ;
				hhaddr.MailingState =hh.npo02__MailingState__c;
				hhaddr.MailingPostalCode = hh.npo02__MailingPostalCode__c;
				hhaddr.MailingCountry =hh.npo02__MailingCountry__c;

            	viableAddresses.put(addressString, hhaddr);
			}
			
			if(activeAddressKey == null)
				setActiveAddress(addressString);
        }
        
        list<Id> activeConIds = new list<Id>();
        activeConIds.addAll(activeContacts.keySet());
        String q = conSelect + 'WHERE id IN :activeConIds';
        list<Contact> cons = Database.query(q);
        
        
        for (Contact con : cons) {
            if (con.MailingStreet != null || con.MailingCity != null || con.MailingState != null || con.MailingPostalCode != null || con.MailingCountry != null) {
                
                string addressString = con.MailingStreet + '#' + con.MailingCity + '#' + con.MailingState + '#' + con.MailingPostalCode + '#' + con.MailingCountry;
                
                // regex pattern for getting all white space
                pattern whtspc = pattern.compile('[\\s]');
                
                //find whitespace
                matcher matchWhtSpc = whtspc.matcher(addressString);
                
                //replace whitespace
                addressString = matchWhtSpc.replaceAll('');
                
                if (!viableAddresses.containsKey(addressString))
				{
					viableAddress conaddr = new viableAddress();

					conaddr.AddressKey = addressString;
    				conaddr.MailingStreet = con.MailingStreet;
    				conaddr.MailingCity = con.MailingCity;
    				conaddr.MailingState = con.MailingState;
    				conaddr.MailingPostalCode = con.MailingPostalCode;
    				conaddr.MailingCountry = con.MailingCountry;

				    viableAddresses.put(addressString, conaddr);
				    
				    if(activeAddressKey == null)
						setActiveAddress(addressString);
				}
            }
        }
        return viableAddresses.values();
    }
    
    /*******************************************************************************************************
    * @description Returns a formulated string based on the contacts in the household
    * @return String The name of the household based on the contacts used.
    ********************************************************************************************************/
    public string getHHName() {
        npo02.HouseholdNaming hh = new npo02.HouseholdNaming();
        String name;
        if (!activeContacts.isEmpty()) {
            list<Contact> sorted = sortingList();
            sorted.addAll(insertContacts);
            name = hh.getHHName(sorted);
        }
        return name;
    }
    
    /*******************************************************************************************************
    * @description Returns a formulated string based on the contacts in the household (there is a method
    * because eventually it will be a javascript remoting method)
    * @return String The name of the household based on the contacts used.
    ********************************************************************************************************/
    public string getHHFormalName() {
        npo02.HouseholdNaming hh = new npo02.HouseholdNaming();
        String name;
        if (!activeContacts.isEmpty()) {
            list<Contact> sorted = sortingList();
            sorted.addAll(insertContacts);
            name = hh.getFormalName(sorted);
        }
        return name;
    }
    
    /*******************************************************************************************************
    * @description Returns a formulated string based on the contacts in the household (there is a method
    * because eventually it will be a javascript remoting method)
    * @return String The name of the household based on the contacts used.
    ********************************************************************************************************/
    public string getHHInformalName() {
        npo02.HouseholdNaming hh = new npo02.HouseholdNaming();
        String name;
        if (!activeContacts.isEmpty()) {
            list<Contact> sorted = sortingList();
            sorted.addAll(insertContacts);
            name = hh.getInformalName(sorted);
        }
        return name;
    }
    
    /*******************************************************************************************************
    * @description Simply queries the list of activeContact ids so that the default sorting is used. This
    * is to make it consistant with the sorting of the names that the trigger uses.
    * @return list<Contact> A sort list of contacts.
    ********************************************************************************************************/
    private list<Contact> sortingList() {
        list<Contact> cons = new list<contact>();
        list<Id> sortOrder = new list<Id>();
        if (!activeContacts.isEmpty()) {
            sortOrder.addAll(activeContacts.keySet());
            sortOrder.sort();
            for (Id cid : sortOrder) {
                cons.add(activeContacts.get(cid));
            }
        }
        return cons;
    }
    
    
    /*******************************************************************************************************
    * @description Retrieves household members. If this is a new hh, retrieves fields for the passed in
    * contact id.
    * @return list<Contact> A sort list of contacts.
    ********************************************************************************************************/
    public list<Contact> getHHMembers() {
        String q = conSelect;
        
        if (conId != null || hh.id != null) q += ' WHERE';
        if (conId != null) q += ' Id=\''+conId+'\'';
        if (conId != null && hh.id != null) q += ' or';
        if (hh.id != null) q += ' npo02__Household__c = \''+hh.id+'\'';
        String qry = q;
        return Database.query(qry);
    }
    
    /*******************************************************************************************************
    * @This method is called by the remoteSave RemoteAction. This most of the work to save the
    * state of the custom interface.
    * @return void.
    ********************************************************************************************************/
    public void saveHH() {
		//save the household address if this is a new household, in an existing household this is handled by the vanilla save action
	    if (hh.id == null) { 
			hh.npo02__MailingStreet__c = activeStreet;
			hh.npo02__MailingCity__c = activeCity;
			hh.npo02__MailingState__c = activeState;
			hh.npo02__MailingPostalCode__c = activePostalCode;
			hh.npo02__MailingCountry__c = activeCountry;
	    }
        // Insert Household
        upsert hh;
        
        // Insert new contacts.
        // This MUST happen before updating contacts
        if (!insertContacts.isEmpty()) {
            for (Contact con : insertContacts) {
                con.npo02__Household__c = hh.id;
                
                // Set Addresses on new Contacts
                if (useAddress == true) {
                    con.MailingStreet = activeStreet;
                    con.MailingCity = activeCity;
                    con.MailingState = activeState;
                    con.MailingPostalCode = activePostalCode;
                    con.MailingCountry = activeCountry;
                }
            }
            insert insertContacts;
        }
        
        // Update our included contacts
        if (!activeContacts.isEmpty()) {
            
            for (Contact con : activeContacts.values()) {
                
                // Set Addresses on active Contacts
                if (useAddress == true) {
                    con.MailingStreet = activeStreet;
                    con.MailingCity = activeCity;
                    con.MailingState = activeState;
                    con.MailingPostalCode = activePostalCode;
                    con.MailingCountry = activeCountry;
                }
                
                // Set household on contacts
                con.npo02__Household__c = hh.id;
                
                update con;
            }
        }
        
        // Remove contacts from household
        if (!removeContacts.isEmpty()) {
            list<Contact> contactsToRemove = new list<Contact>();
            for (Contact con : removeContacts.values()) {
                con.npo02__Household__c = null;
                contactsToRemove.add(con);
            }
            update contactsToRemove;
        }
        
        
    }
    
    /*******************************************************************************************************
    * @Simply calls delete, on the correct hh, using the standard controller
    * @return PageReference.
    ********************************************************************************************************/
    public PageReference deleteHH() {
        ApexPages.StandardController sc = new ApexPages.standardController(hh);
        return sc.delete();
    }
    
    /*******************************************************************************************************
    * @Simply calls save, on the correct hh, using the standard controller
    * @return PageReference.
    ********************************************************************************************************/
    public PageReference save() {

        ApexPages.StandardController sc = new ApexPages.standardController(hh);
        PageReference sv = sc.save();
        
        //Rollup household - uncomment this in NPSP - the constructor is not global so cannot be called outside the managed package
        /*npo02.OpportunityRollups rg = new npo02.OpportunityRollups();
        rg.rollupHousehold(hh.id);*/
                
        return sv;
    }
    
    // TEST METHOD
    public static testMethod void testExistingHH() {
        
        npo02__Household__c hh = new npo02__Household__c(
            Name = 'test_hh'
            );
        insert hh;
        
        Contact con = new Contact(
            FirstName = 'David',
            LastName = 'TestContactASDF',
            email = 'testemail@groundwiretest.org',
            npo02__Household__c = hh.id,
            MailingStreet = '1234 Testing Drive Suite 1000',
            MailingCity = 'Seattle',
            MailingState = 'WA',
            MailingPostalCode = '98101',
            MailingCountry = 'USA'
            );
        insert con;
        
        Test.startTest();
        
        npo02__Household__c tempHH = new npo02__Household__c();
        ApexPages.StandardController sc = new ApexPages.standardController(tempHH);
        
        // Test a bogus hhid
        ApexPages.currentPage().getParameters().put('hhid', 'sdf');
        
        ManageHousehold_EXT ext = new ManageHousehold_EXT(sc);
        
        //Make sure we are creating a new HH
        system.assertEquals(null, ext.hh.id);
        
        sc = new ApexPages.standardController(tempHH);
        
        // Test a good hhid
        ApexPages.currentPage().getParameters().put('hhid', hh.Id);
        ext = new ManageHousehold_EXT(sc);
        
        // Make sure we correctly got the right HH
        system.assertEquals(hh.Id, ext.hh.Id);
        
        system.assertEquals(false, ext.activeContacts.isEmpty());
        
        //test active address variables are set
        system.assertEquals(con.MailingStreet, ext.activeStreet);
        system.assertEquals(con.MailingState, ext.activeState);
        system.assertEquals(con.MailingCity, ext.activeCity);
        system.assertEquals(con.MailingPostalCode, ext.activePostalCode);
        system.assertEquals(con.MailingCountry, ext.activeCountry);
        
        //test name
        system.assertEquals('TestContactASDF Household', ext.getHHName());
        
        //test greeting
        system.assertEquals('David TestContactASDF', ext.getHHFormalName());
        
        //test greeting
        system.assertEquals('David', ext.getHHInformalName());
        
        Test.stopTest();
    }
    
    
    public static testMethod void testHHAddrToContact() {
        //tests writing the household address to the contact if the flag is ticked
        npo02__Household__c hh = new npo02__Household__c(
            Name = 'test_hh',
            npo02__MailingStreet__c = '1234 Testing Drive Suite 1000',
            npo02__MailingCity__c = 'Seattle',
            npo02__MailingState__c = 'WA',
            npo02__MailingPostalCode__c = '98101',
            npo02__MailingCountry__c = 'USA'
            );
        insert hh;
        
        Contact con = new Contact(
            FirstName = 'David',
            LastName = 'TestContactASDF',
            email = 'testemail@groundwiretest.org',
            npo02__Household__c = hh.id
            );
        insert con;
        Test.startTest();
        
        npo02__Household__c tempHH = new npo02__Household__c();
        ApexPages.StandardController sc = new ApexPages.standardController(tempHH);
        
        // Test a good hhid
        ApexPages.currentPage().getParameters().put('hhid', hh.Id);
        ManageHousehold_EXT ext = new ManageHousehold_EXT(sc);
        
        // Make sure we correctly got the right HH
        system.assertEquals(hh.Id, ext.hh.Id);
        
        system.assertEquals(false, ext.activeContacts.isEmpty());
        
        //set the flag that writes the address from household to contact
        ext.useAddress = true;
        
        //test that it also works on new contacts
        ext.insertContacts.add(new Contact(Firstname = 'John', LastName ='Jones', npo02__Naming_Exclusions__c = 'Household__c.Name;Household__c.Formal_Greeting__c;Household__c.Informal_Greeting__c;'));
        
        ext.saveHH();
        
        Contact con1 = [select MailingStreet,MailingState,MailingCity,MailingPostalCode,MailingCountry from contact where id = :con.id][0];
        //test household address written to contact
        system.assertEquals(con1.MailingStreet, ext.hh.npo02__MailingStreet__c);
        system.assertEquals(con1.MailingState, ext.hh.npo02__MailingState__c);
        system.assertEquals(con1.MailingCity, ext.hh.npo02__MailingCity__c);
        system.assertEquals(con1.MailingPostalCode, ext.hh.npo02__MailingPostalCode__c);
        system.assertEquals(con1.MailingCountry, ext.hh.npo02__MailingCountry__c);

		Contact con2 = [select MailingStreet,MailingState,MailingCity,MailingPostalCode,MailingCountry from contact where name = 'John Jones'][0];
        //test household address written to contact
        system.assertEquals(con2.MailingStreet, ext.hh.npo02__MailingStreet__c);
        system.assertEquals(con2.MailingState, ext.hh.npo02__MailingState__c);
        system.assertEquals(con2.MailingCity, ext.hh.npo02__MailingCity__c);
        system.assertEquals(con2.MailingPostalCode, ext.hh.npo02__MailingPostalCode__c);
        system.assertEquals(con2.MailingCountry, ext.hh.npo02__MailingCountry__c);
        //test name
        system.assertEquals('TestContactASDF Household', ext.getHHName());
        
        //test greeting
        system.assertEquals('David TestContactASDF', ext.getHHFormalName());
        
        //test greeting
        system.assertEquals('David', ext.getHHInformalName());
        
        Test.stopTest();
    }
    
    public static testMethod void testRemoveContactActiveAddress() {
        //tests that removing the contact who is the only owner of the active address changes the active address to another appropriate one
        
        npo02__Household__c hh = new npo02__Household__c(
            Name = 'test_hh'
            );
        insert hh;
        
        Contact con1 = new Contact(
            FirstName = 'David',
            LastName = 'TestContactASDF',
            email = 'testemail@groundwiretest.org',
            npo02__Household__c = hh.id,
            MailingStreet = '1234 Testing Drive Suite 1000',
            MailingCity = 'Seattle',
            MailingState = 'WA',
            MailingPostalCode = '98101',
            MailingCountry = 'USA'
            );
        insert con1;
        
        Contact con2 = new Contact(
            FirstName = 'David',
            LastName = 'TestContactASDF',
            email = 'testemail@groundwiretest.org',
            npo02__Household__c = hh.id,
            MailingStreet = '5678 Testing Drive Suite 1000',
            MailingCity = 'Seattle',
            MailingState = 'WA',
            MailingPostalCode = '98101',
            MailingCountry = 'USA'
            );
        insert con2;
        
        Test.startTest();
        
        npo02__Household__c tempHH = new npo02__Household__c();
        ApexPages.StandardController sc = new ApexPages.standardController(tempHH);
        
        // Test a good hhid
        ApexPages.currentPage().getParameters().put('hhid', hh.Id);
        
        ManageHousehold_EXT ext = new ManageHousehold_EXT(sc);
                
        // Make sure we correctly got the right HH
        system.assertEquals(hh.Id, ext.hh.Id);
        
        system.assertEquals(false, ext.activeContacts.isEmpty());
        
        //check two distinct addresses
        system.assertEquals(2, ext.viableAddresses.size());

		string oldactiveaddr = ext.activeAddressKey;
		
		//remove the appropriate active address contact
        if(ext.activeAddressKey.startsWith('1234'))
        {
        	String jsSt = JSON.serialize(ext);
	        String nwSt = ManageHousehold_EXT.remoteRemoveMember(con1.id, jsSt);
	        ext = ManageHousehold_EXT.unpackState(nwSt);
        }
        else if(ext.activeAddressKey.startsWith('5678'))
        {
        	String jsSt = JSON.serialize(ext);
	        String nwSt = ManageHousehold_EXT.remoteRemoveMember(con2.id, jsSt);
	        ext = ManageHousehold_EXT.unpackState(nwSt);
        }
        
        //ensure that the active address has changed
        system.assertNotEquals(oldactiveaddr, ext.activeAddressKey);
        
        //check single address left
        system.assertEquals(1, ext.viableAddresses.size());
                
        Test.stopTest();
    }
    
    public static testMethod void testNewHH() {
        
        npo02__Household__c hh = new npo02__Household__c(
            Name = 'test_hh'
            );
        
        
        Contact con = new Contact(
            LastName = 'TestContactASDF',
            email = 'testemail@groundwiretest.org',
            MailingStreet = '1234 Testing Drive Suite 1000',
            MailingCity = 'Seattle',
            MailingState = 'WA',
            MailingPostalCode = '98101',
            MailingCountry = 'USA'
            );
        insert con;
        
        Contact con2 = new Contact(
            LastName = 'TestContact2 ',
            email = 'testemail2@groundwiretest.org',
            MailingStreet = 'Drastically Different',
            MailingCity = 's',
            MailingState = 'd',
            MailingPostalCode = '1',
            MailingCountry = 'b'
            );
        insert con2;
        
        Test.startTest();
        ApexPages.StandardController sc = new ApexPages.standardController(hh);
        
        ApexPages.currentPage().getParameters().put('cid', con.id);
        
        ManageHousehold_EXT ext = new ManageHousehold_EXT(sc);
        
        //make sure we got the contact
        system.assertEquals(con.id, ext.conId);
        
        system.assertEquals(null, ext.hh.id);
        
        
        
        // verify that we receive false when we attempt to add a bad contact
        system.assertEquals(false, ext.addContact('01pU0000000h6LK'));
        system.assertEquals(false, ext.addContactWithHousehold('01pU0000000h6LK'));
        
        //save
        ext.saveHH();
        
        // verify that we have a household id
        system.assertNotEquals(null, ext.hh.id);
        
        sc = new ApexPages.standardController(hh);
        ApexPages.currentPage().getParameters().put('id', hh.id);
        ext = new ManageHousehold_EXT(sc);
        
        system.assertEquals(1, ext.activeContacts.size());
        
        // Get contacts in household
        //list<Contact> householdMembers = [SELECT Id, Name, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry, npo02__Household__c FROM Contact WHERE npo02__Household__c = :ext.hh.id];
        
        //test household address is set
        system.assertEquals(con.MailingStreet, ext.hh.npo02__MailingStreet__c);
        system.assertEquals(con.MailingState, ext.hh.npo02__MailingState__c);
        system.assertEquals(con.MailingCity, ext.hh.npo02__MailingCity__c);
        system.assertEquals(con.MailingPostalCode, ext.hh.npo02__MailingPostalCode__c);
        system.assertEquals(con.MailingCountry, ext.hh.npo02__MailingCountry__c);
        
        Test.stopTest();
    }
    
    public static testMethod void testFindAndAdd() {
        
        npo02__Household__c hh = new npo02__Household__c();
        
        npo02__Household__c existingHH = new npo02__Household__c (
            Name = 'existing hh'
            );
        insert existingHH;
        
        Contact con = new Contact(
            FirstName = 'John',
            LastName = 'TEST abc Monkey',
            email = 'testemail@groundwiretest.org',
            MailingStreet = '1234 Testing Drive Suite 1000',
            MailingCity = 'Seattle',
            MailingState = 'WA',
            MailingPostalCode = '98101',
            MailingCountry = 'USA'
            );
        insert con;
        
        Contact con2 = new Contact(
            FirstName = 'Mike',
            LastName = 'TEST Monkey abc',
            email = 'testemail@groundwiretest.org',
            MailingStreet = '1234 Testing Drive Suite 1000',
            MailingCity = 'Seattle ',
            MailingState = ' WA',
            MailingPostalCode = '98101',
            MailingCountry = 'USA '
            );
        insert con2;
        
        Contact con3 = new Contact(
            FirstName = 'Cheryl',
            LastName = 'ABC TEST Monkey',
            email = 'testemail@groundwiretest.org',
            MailingStreet = '54321 Anderson',
            MailingCity = 'Kirkland',
            MailingState = 'WA',
            MailingPostalCode = '98034'
            );
        insert con3;
        
        Contact con4 = new Contact(
            FirstName = 'Toivo',
            LastName = 'abc TEST Monkey',
            email = 'testemail@groundwiretest.org'
            );
        insert con4;
        
        Contact con5 = new Contact(
            FirstName = 'Kelley',
            LastName = 'adc TEST Monkey',
            email = 'testemail@groundwiretest.org'
            );
        insert con5;
        
        Contact conWithHH = new Contact (
            FirstName = 'Andy',
            LastName = 'David WithHousehold',
            email = 'testEmail@groundwiretest2.org',
            npo02__Household__c = existingHH.id
            );
        insert conWithHH;
        
        Contact conWithHH2 = new Contact (
            FirstName = 'Cheryl',
            LastName = 'WithHousehold',
            email = 'testEmail@groundwiretest3.org',
            npo02__Household__c = existingHH.id
            );
        insert conWithHH2;
        
        Test.startTest();
        ApexPages.StandardController sc = new ApexPages.standardController(new npo02__Household__c());
        
        ApexPages.currentPage().getParameters().put('cid', con2.id);
        ApexPages.currentPage().getParameters().put('hhid', hh.id);
        
        ManageHousehold_EXT ext = new ManageHousehold_EXT(sc);
        
        list<Contact> cQ = ManageHousehold_EXT.findContacts('abc', ext.jsonState);
        
        Contact ca = [SELECT Id, MailingStreet FROM Contact WHERE id = :con2.id];
        
        // make sure we only got three
        system.assertEquals(3, cQ.size());
        
        // select one and add it
        ext.addContact(cQ[1].Id);
        
        string hhName = ext.getHHName();
        string hhGreeting = ext.getHHFormalName();
        
        //test the name
        /*system.assertEquals(true, hhName.contains('Mike'));
        system.assertEquals(true, hhName.contains('Cheryl'));*/
        system.assertEquals(true, hhGreeting.contains('Mike'));
        //system.assertEquals(true, hhGreeting.contains('Cheryl'));
        
        // verify that the contact was added
        system.assertEquals(2, ext.activeContacts.size());
        //system.assertEquals(true, ext.activeConIds.contains(cQ[1].Id));
        
        cQ = ManageHousehold_EXT.findContacts('zzzzzz', ext.jsonState);
        
        system.assertEquals(0, cQ.size());
        
        // add more contacts with different addresses
        ext.addContact(con.id);
        ext.addContact(con2.id);
        ext.addContact(con3.id);
        
        system.assertEquals(3, ext.activeContacts.size());
        
        // find viable addresses
        list<viableAddress> adds = ext.getViableAddresses();
        
        //verify that we found two valid addresses even though the matches aren't exactly the same
        system.AssertEquals(2, ext.viableAddresses.size());
        
        
        String jsSt = JSON.serialize(ext);
        
        // now test adding a contact with its existing household members
        String nwSt = ManageHousehold_EXT.remoteAddMember(conWithHH.id, true, jsSt);
        
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // We should now have 5 total hh members displayed
        system.assertEquals(5, ext.activeContacts.size());
        
        // We should also check that the correct contact got added
        system.assertEquals(true, ext.activeContacts.containsKey(conWithHH2.id));
        system.assertEquals(conWithHH2.id, ext.activeContacts.get(conWithHH2.id).id);
        
        // now add a contact without a hh
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteAddMember(con5.id, false, jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // Add another for good measure (will use later)
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteAddMember(con4.id, false, jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // Check that the contacts got added
        system.assertEquals(true, ext.activeContacts.containsKey(con5.id));
        system.assertEquals(true, ext.activeContacts.containsKey(con4.id));
        
        // Now let us remove a contact
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteRemoveMember(con5.id, jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // Test that it was removed
        system.assertEquals(false, ext.activeContacts.containsKey(con5.id));
        
        // Test changing name
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteSetNaming(false, 'The Test123Awesomes', false, 'TestZZ1234', false, 'blah', jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // Verify that name and greeting were set
        system.assertEquals('The Test123Awesomes', ext.hhName);
        system.assertEquals('TestZZ1234', ext.hhFormalGreeting);
        
        // Save
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteSave(jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // query for a contact and make sure it got the correct fields set
        Contact con4q = [SELECT Id, npo02__Household__c, MailingStreet FROM Contact WHERE Id = :con4.id];
        
        system.assertEquals(ext.hh.id, con4q.npo02__Household__c);
        
        // Set the address to the new contact
        ext.setActiveAddress(con4.id);
        
        // Now remove another member, save, and make sure the lookup field is set to null
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteRemoveMember(con4.id, jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        // Save
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteSave(jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        con4q = [SELECT Id, npo02__Household__c, MailingStreet FROM Contact WHERE Id = :con4.id];
        
        system.assertNotEquals(ext.hh.id, con4q.npo02__Household__c);
        
        // Now add a completely new contact and save
        ext.insertContacts.add(new Contact(FirstName = 'Lefty', LastName = 'TestFunky123'));
        
        // Save
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteSave(jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        // Query for our new contact
        Contact newCon = [SELECT Id, npo02__Household__c, Name FROM Contact WHERE Name = 'Lefty TestFunky123'];
        system.assertEquals(ext.hh.id, newCon.npo02__Household__c);
        
        Id fHHid = ext.hh.id;
        
        // Cover the "standard" save
        ext.save();
        
        // Now, test delete
        ext.deleteHH();
        
        Test.stopTest();
        
    }
    
    public static testMethod void testRemoveReAdd() {
        
        npo02__Household__c hh = new npo02__Household__c (
            Name = 'Household'
            );
        insert hh;
        
        Contact con1 = new Contact(
            FirstName = 'Joe',
            LastName = 'Test',
            npo02__Household__c = hh.id
            );
        insert con1;
        
        Contact con2 = new Contact(
            FirstName = 'Jim',
            LastName = 'Test',
            npo02__Household__c = hh.id
            );
        insert con2;
              
        Test.startTest();
        ApexPages.StandardController sc = new ApexPages.standardController(hh);
                
        ManageHousehold_EXT ext = new ManageHousehold_EXT(sc);
        
        String jsSt;
        String nwSt;
        
        
        system.assertEquals(2, ext.activeContacts.size());
        system.assertEquals(0,ext.removeContacts.size());
        
        // Now let us remove a contact
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteRemoveMember(con2.id, jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        
        system.assertEquals(1, ext.activeContacts.size());
        system.assertEquals(1,ext.removeContacts.size());
        
        
        // re add it
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteAddMember(con2.id, false, jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);
        
        
        system.assertEquals(2, ext.activeContacts.size());
        system.assertEquals(0,ext.removeContacts.size());
        
        // Save
        jsSt = JSON.serialize(ext);
        nwSt = ManageHousehold_EXT.remoteSave(jsSt);
        ext = ManageHousehold_EXT.unpackState(nwSt);

		ext.save();

        system.assertEquals(2,[SELECT Id, npo02__Household__c FROM Contact WHERE npo02__Household__c = :hh.id].size());       

        Test.stopTest();
        
    }
}